tomcat解压之后的目录：
  bin：可执行文件（startup.bat shutdown.bat）
  conf:配置文件（server.xml）
  lib：tomcat依赖的jar文件
  log：日志文件 纪录tomcat启动和运行期间的日志信息
  temp：临时文件
  webapps：可执行的项目
  work：存放.jsp文件翻译成的.java文件以及编译成的.class文件
  
  tomcat运行依赖JDK，需要配置JAVA_HOME
  tomcat启动的时候有可能会与别的程序端口冲突，引起错误，修改server.xml中的端口号
  tomcat启动之后访问浏览器:http://localhost:8080默认访问的是webapps下的ROOT项目
  常见的状态码：
    200：正常返回
    300/301：页面重定向
    404：资源不存在
    403:权限不足,（访问的目录不可见）
    500:服务器内部错误（代码问题）
    
jsp:宏观的来说，jsp就是在html页面中嵌套java代码 <%   java代码....... %>


虚拟路径:
  server.xml中的<Engine></Engine>中的host标签中配置项目的虚拟路径
  默认配置的虚拟路径是webapps
  在<host></host>中增加一个虚拟路劲操作:
  <Context docBase="实际项目的路径" path="浏览器访问的路径(相对路径是相对于webapps)"/>
  每一个项目的虚拟路劲需要增加一个<Context>(区分大小写，首字母大写)标签来映射
  
JSP执行流程:
  jsp-->java(其实是一个servlet文件)--->class文件
  这个java文件和class文件放在tomcat下的work目录中
  
  第一次请求服务器的jsp资源时，会将jsp文件进行翻译（成java文件），编译（成class文件）
  所以第一次访问会比较慢，第二次就直接使用class文件
  
jsp页面中的脚本语言（Java代码），有三种形式：
 第一种：
 <%
    局部变量，java语句
  %>
  第二种：
  <%!
    全局变量，方法
  %>
  第三种：
  <%=输出表达式%>
  
  例如：在同一个jsp页面中
  <%!
    public String bookName;
    public void init(){
      bookName = "java 书籍..."；
    }
  %>
 <%
    out.print("hello");
    init();
 %>
 <%=bookName%>
  
  
  session 和cookie  session是保存在服务端的 cookie是保存在客户端 安全性来说 session更高 
  
 客户端第一次请求服务端的时候 服务器端会为该请求产生一个session对象(用户保存用户请求信息)，
 并且这个session有一个唯一的sessionID来唯一区分每个会话，然后服务端会产生一个cookie对象，
 并且该cookie的 name=JESSIONID value=刚刚的sessionID，在服务端响应客户端的时候会将这个cookie
 发送给客户端,这样在这个会话中，客户端就可以和服务端一一对应起来（通过cookie的JSESSIONID和sessionID）
 
 session的机制：
  1.session是存放在服务端
  2.session是同一个用户（客户）请求过程中共享
  3.实现机制：第一次客户端请求时产生一个SessionID然后复制给Cookie的JSESSIONID,并且返回给客户端，通过
    这两个值的一一对应来确定是否在同一个会话中
    
  session方法:
  String getId() :获取sessionID
  boolean isNew()：判断是否是第一次访问
  void invalidate(); 使用session失效(一般退出登录，注销等使用)
  void setAttribute(String key,String value);
  Object getAttribute(String key);
  void setMaxInactiveInterval(int 秒):设置最大有效非活动时间
  int getMaxInactiveInterval(); 获取最大有效非活动时间
  
  浏览器直接在地址栏按回车是按照当前的地址请求，但是并不会带上参数什么的。
  而按F5刷新的时候，会重复此前的动作，比如之前进入这个页面的时候是提交了数据的，
    那么按F5之后会依照之前的请求参数再发一次请求
    
   
   
    
    
  
